local colors = require("colors")

local get_colors = function(variant)
  return colors[variant]
end

local JB = {}

local setup = function()
  vim.g.color_name = "darcula"
  vim.g.colors_name = "darcula"
  local bg = vim.o.background

  local colors = get_colors(bg)

  local hi = vim.api.nvim_set_hl

  vim.cmd("highlight clear")

  hi(0, "Normal", { fg = colors.text, bg = colors.gray_1 })
  hi(0, "NormalNC", { fg = colors.text, bg = colors.gray_1 })
  hi(0, "NormalSB", { fg = colors.text, bg = colors.gray_1 })
  hi(0, "SignColumn", { fg = colors.gray_5, bg = colors.gray_1 })
  hi(0, "EndOfBuffer", { fg = colors.gray_9 })
  hi(0, "NormalFloat", { fg = colors.gray_12, bg = colors.gray_2 })
  hi(0, "FloatBorder", { fg = colors.gray_3, bg = colors.gray_2 })
  hi(0, "ColorColumn", { fg = colors.gray_5, bg = colors.gray_1 })
  hi(0, "Conceal", { fg = colors.gray_5 })
  hi(0, "Cursor", { bg = colors.gray_2 })
  hi(0, "CursorIM", { bg = colors.gray_1 })
  hi(0, "CursorLineNr", { fg = colors.gray_9, bg = colors.gray_1 })
  hi(0, "vCursor", { link = "Cursor" })
  hi(0, "iCursor", { link = "Cursor" })
  hi(0, "lCursor", { link = "Cursor" })
  hi(0, "LineNr", { fg = colors.gray_9 })
  hi(0, "Directory", { fg = colors.gray_12, bold = true })
  hi(0, "DiffAdd", { fg = colors.green_4, bg = colors.green_1 })
  hi(0, "DiffChange", { fg = colors.blue_4, bg = colors.blue_1 })
  hi(0, "DiffDelete", { fg = colors.red_4, bg = colors.red_1 })
  hi(0, "DiffText", { fg = colors.gray_12 })
  hi(0, "ErrorMsg", { fg = colors.gray_14, bg = colors.red_1 })
  hi(0, "Folded", { fg = colors.gray_11, bg = colors.gray_4 })
  hi(0, "FoldColumn", { fg = colors.gray_11, bg = colors.gray_4 })
  hi(0, "MatchParen", { fg = colors.purple_6 })
  hi(0, "ModeMsg", { fg = colors.gray_14, bg = colors.gray_3 })
  hi(0, "MoreMsg", { fg = colors.gray_14, bg = colors.gray_3 })
  hi(0, "NonText", { fg = colors.gray_9 })
  hi(0, "Pmenu", { fg = colors.gray_12, bg = colors.gray_2 })
  hi(0, "PmenuSel", { bg = colors.blue_2 })
  hi(0, "PmenuSbar", { bg = colors.gray_2 })
  hi(0, "PmenuThumb", { fg = colors.gray_4 })
  -- hi(0, "Question", { fg = colors.cyan, bold = true })
  hi(0, "QuickFixLine", { bg = colors.blue_2 })
  hi(0, "qfLineNr", { fg = colors.gray_9 })
  -- hi(0, "Search", { fg = colors.bg0, bg = colors.fg0 })
  -- hi(0, "IncSearch", { fg = colors.bg0, bg = colors.fg1 })
  -- hi(0, "SpecialKey", { fg = colors.fg1 })
  hi(0, "SpellBad", { fg = colors.red_6, undercurl = true })
  -- hi(0, "SpellCap", { fg = colors.blue, bg = colors.none, italic = true, undercurl = true })
  -- hi(0, "SpellLocal", { fg = colors.cyan, bg = colors.none, italic = true, undercurl = true })
  -- hi(0, "SpellRare", { fg = colors.cyan, bg = colors.none, italic = true, undercurl = true })
  hi(0, "StatusLine", { fg = colors.gray_9, bg = colors.gray_3 })
  hi(0, "StatusLineNC", { fg = colors.gray_9, bg = colors.gray_2 })
  hi(0, "StatusLineTerm", { fg = colors.gray_9, bg = colors.gray_3 })
  hi(0, "StatusLineTermNC", { fg = colors.gray_9, bg = colors.gray_2 })
  hi(0, "TabLineFill", { fg = colors.gray_10, bg = colors.gray_1 })
  hi(0, "TablineSel", { fg = colors.gray_12, bg = colors.gray_1, underline = true })
  hi(0, "Tabline", { fg = colors.gray_10, bg = colors.gray_1 })
  hi(0, "Title", { fg = colors.gray_2 })
  hi(0, "Visual", { bg = colors.blue_1 })
  hi(0, "VisualNOS", { bg = colors.gray_2 })
  hi(0, "WarningMsg", { fg = colors.yellow, bold = true })
  hi(0, "WildMenu", { fg = colors.gray_12, bg = colors.gray_2, bold = true })
  hi(0, "CursorColumn", { bg = colors.gray_1 })
  hi(0, "CursorLine", { bg = colors.gray_2 })
  hi(0, "ToolbarLine", { fg = colors.gray_12, bg = colors.gray_2 })
  hi(0, "ToolbarButton", { fg = colors.gray_14, bg = colors.blue_6 })
  hi(0, "NormalMode", { fg = colors.blue_6 })
  hi(0, "InsertMode", { fg = colors.green_6 })
  hi(0, "VisualMode", { fg = colors.yellow_7 })
  hi(0, "CommandMode", { fg = colors.purple_6 })
  hi(0, "VertSplit", { fg = colors.gray_3, bg = colors.gray_1 })
  hi(0, "Warnings", { fg = colors.warning })
  -- Syntax highlighting
  hi(0, "Type", { fg = colors.keyword })
  hi(0, "Typedef", { fg = colors.keyword })
  hi(0, "StorageClass", { fg = colors.keyword })
  hi(0, "Structure", { fg = colors.keyword })
  hi(0, "Constant", { fg = colors.constant })
  hi(0, "Character", { fg = colors.string })
  hi(0, "Number", { fg = colors.number })
  hi(0, "Boolean", { fg = colors.keyword, bold = true })
  hi(0, "Float", { fg = colors.number })
  hi(0, "String", { fg = colors.string })
  hi(0, "StringDelimiter", { fg = colors.string })
  hi(0, "Comment", { fg = colors.comment, italic = true })
  hi(0, "Delimiter", { fg = colors.text })
  hi(0, "Identifier", { fg = colors.text })
  hi(0, "Function", { fg = colors.method, italic = true })
  hi(0, "Statement", { fg = colors.text })
  hi(0, "Conditional", { fg = colors.keyword })
  hi(0, "Repeat", { fg = colors.keyword })
  hi(0, "Label", { fg = colors.metadata })
  hi(0, "Operator", { fg = colors.text })
  hi(0, "Keyword", { fg = colors.keyword, italic = true })
  hi(0, "Exception", { fg = colors.keyword })
  hi(0, "PreProc", { fg = colors.keyword })
  hi(0, "Include", { fg = colors.keyword, italic = true })
  hi(0, "Define", { fg = colors.keyword })
  hi(0, "Macro", { fg = colors.keyword })
  hi(0, "PreCondit", { fg = colors.keyword })
  hi(0, "Special", { fg = colors.keyword, bold = true })
  hi(0, "SpecialChar", { fg = colors.string })
  hi(0, "Tag", { fg = colors.html_tag })
  hi(0, "SpecialComment", { fg = colors.doc_string })
  hi(0, "Debug", { fg = colors.keyword })
  hi(0, "Underlined", { fg = colors.text, underline = true })
  hi(0, "Ignore", { fg = colors.text })
  hi(0, "Error", { fg = colors.error, underline = true })
  hi(0, "Todo", { fg = colors.todo, italic = true })
end

JB.colors = colors
JB.setup = setup

return JB
